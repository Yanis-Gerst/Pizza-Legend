{"mappings":"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","sources":["Script/Battle/TurnCycle.js"],"sourcesContent":["class TurnCycle {\n    constructor({battle, onNewEvent, onWinner}) {\n        this.battle = battle\n        this.onNewEvent = onNewEvent\n        this.onWinner = onWinner\n        this.currentTeam = \"player\" // A rendre modifiable\n    }\n\n    async turn() {\n\n        //Pre Event, qui fait quoi\n        const casterId = this.battle.activeCombatants[this.currentTeam]\n        const caster = this.battle.combatants[casterId]\n        this.caster = caster\n        const ennemyTeam = this.currentTeam === \"player\" ? \"ennemy\" : \"player\"\n        const ennemyId = this.battle.activeCombatants[ennemyTeam]\n        const ennemy = this.battle.combatants[ennemyId]\n        this.ennemy = ennemy\n        \n        this.action = await this.onNewEvent({\n            type:\"actionMenu\",\n            caster: caster,\n            ennemy: ennemy\n        })\n\n        this.ennemyAction = await this.onNewEvent({\n            type:\"actionMenu\",\n            caster: ennemy,\n            ennemy: caster\n        })\n        //Si on switch on fait d'autre truc\n        \n        if (this.action.replacement) {          \n            await this.onNewEvent({\n                type:\"switch\",\n                replacer: this.action.replacement\n            })\n            this.caster = this.action.replacement\n         \n            await this.ennemyDoActions()\n            let teamDead = await this.anyoneDead()  \n            if (teamDead === \"winner\") return\n            await this.PlayerPostEvent(teamDead)\n            await this.ennemyPostEvent(teamDead)\n            teamDead = await this.anyoneDead()\n            if (teamDead === \"winner\") return\n            await this.playerExpiredEvent(teamDead)\n            await this.ennemyExpiredEvent(teamDead)\n            this.nextTurn()\n            return\n        }\n\n\n        if (this.action.instanceId) {\n            //Enlever les items pour l'overworld\n            this.battle.usedIntancesId[this.action.instanceId] = true\n\n            //Enlever les items du combats\n            this.battle.items = this.battle.items.filter(item => {\n                return this.action.instanceId !== item.instanceId\n            })\n        }\n       \n        \n        if (this.caster.speed > this.ennemy.speed) {\n           \n          \n            await this.playerDoActions()\n            let teamDead = await this.anyoneDead()  \n            if (teamDead === \"winner\") return\n            await this.ennemyDoActions(teamDead)\n            teamDead = await this.anyoneDead(teamDead)\n            if (teamDead === \"winner\") return\n            await this.ennemyPostEvent(teamDead)\n            await this.PlayerPostEvent(teamDead)\n            //Object Dead\n            teamDead = await this.anyoneDead(teamDead)\n            if (teamDead === \"winner\") return       \n            await this.playerExpiredEvent(teamDead)\n            await this.ennemyExpiredEvent(teamDead)\n            \n        } else {\n            await this.ennemyDoActions()        \n            let teamDead = await this.anyoneDead()  \n            if (teamDead === \"winner\") return\n            await this.playerDoActions(teamDead)\n            teamDead = await this.anyoneDead(teamDead)\n            if (teamDead === \"winner\") return\n            await this.PlayerPostEvent(teamDead)      \n            await this.ennemyPostEvent(teamDead)\n            teamDead = await this.anyoneDead(teamDead)\n            if (teamDead === \"winner\") return\n            await this.playerExpiredEvent(teamDead)\n            await this.ennemyExpiredEvent(teamDead)\n        }\n        \n        this.nextTurn()\n        return\n    }\n\n    nextTurn() {  \n        this.turn()\n    }\n\n    getWinningTeam() {\n        //Object avec les 2 teams en clé\n        let aliveTeams = {}\n        Object.values(this.battle.combatants).forEach(combatant => {\n            if (combatant.hp > 0) {\n                aliveTeams[combatant.team] = true\n            }\n        })\n\n        if (!aliveTeams[\"player\"]) { return \"ennemy\"}\n        if (!aliveTeams[\"ennemy\"]) { return \"player\"}\n        return null\n    }\n\n   \n    async playerDoActions(dead) {\n        \n        if (dead === \"player\") return\n        const resultingEvent =  this.action.attack.succes\n        \n            //Event on fais les bails\n            for (let i = 0; i < resultingEvent.length; i++) {\n                const event = {\n                    ...resultingEvent[i],\n                    action: this.action,\n                    attack: this.action.attack,\n                    caster: this.caster,\n                    target: this.ennemy\n                }\n              \n                await this.onNewEvent(event)\n            }\n        return new Promise(resolve => {\n            resolve()\n        })\n    }\n    \n    async ennemyDoActions(dead) {\n        if (dead === \"ennemy\") return\n        const ennemyEvent = this.ennemyAction.attack.succes\n            for (let i = 0; i < ennemyEvent.length; i++) {\n                const eventEn = {\n                    ...ennemyEvent[i],\n                    action: this.ennemyAction,\n                    attack: this.ennemyAction.attack,\n                    caster: this.ennemy,\n                    target: this.caster,\n                }\n                await this.onNewEvent(eventEn)\n            }\n        \n        return new Promise(resolve => {\n            resolve()\n        })\n    }\n\n    async playerExpiredEvent(dead) {\n        if (dead === \"player\") return\n        const casterExpiredEvent = this.caster.decrementStatus()\n        for (let i = 0; i < casterExpiredEvent.length; i++) {\n            const event = {\n                ...casterExpiredEvent[i],\n                action: this.action,\n                attack: this.action.attack,\n                caster: this.caster,\n                target: this.ennemy,\n            }\n            await this.onNewEvent(event)\n        }\n    }\n\n    async ennemyExpiredEvent(dead) {\n        if (dead === \"ennemy\")  return\n        const ennemyExpiredEvent = this.ennemy.decrementStatus()\n        for (let i = 0; i < ennemyExpiredEvent.length; i++) {\n            const event = {\n                ...ennemyExpiredEvent[i],\n                action: this.ennemyAction,\n                attack: this.ennemyAction.attack,\n                caster: this.ennemy,\n                target: this.caster,\n            }\n            await this.onNewEvent(event)\n        }\n    }\n    async anyoneDead(teamAlreadyDead) {\n        const oneIsDead = this.caster.hp <= 0 || this.ennemy.hp <= 0\n        \n        if(!oneIsDead) return\n\n        const who = this.caster.hp > 0 ? this.ennemy : this.caster\n        if (teamAlreadyDead) {\n            if (who.team === teamAlreadyDead) return teamAlreadyDead\n        }\n        \n        await this.onNewEvent({\n            type:\"textMessage\", text:`${who.name} est mort!!`\n        })\n\n        if (who === this.ennemy) {\n            const alivePizza = this.caster\n            const xp = who.givesXp\n\n            await this.onNewEvent({\n                type:\"textMessage\", text:` ${alivePizza.name} a gagné ${xp} XP !`\n            })\n\n            await this.onNewEvent({ \n                type:\"giveXp\",\n                xp: xp,\n                combatant: alivePizza\n            })\n        }\n        //Victory ?\n        const winner = this.getWinningTeam()\n\n        if (winner) {\n            await this.onNewEvent({\n                type:\"textMessage\",\n                text:`${winner === \"player\" ? playerState.name : this.battle.ennemy.name} a gagné`\n            })\n            this.onWinner(winner)\n            return \"winner\"\n        }\n\n        const replacer = await this.onNewEvent({\n            type:\"replacementMenu\",\n            team: who.team\n        })\n\n        await this.onNewEvent({\n            type: \"switch\",\n            replacer: replacer\n        })\n\n        await this.onNewEvent({\n            type:\"textMessage\",\n            text:`${replacer.name} veut dahack`\n        })\n        const team = who.team\n      \n        return new Promise(resolve => {\n            resolve(team)\n        })\n    }\n\n    async PlayerPostEvent(dead) {\n        if (dead === \"player\") return\n        const casterPostEvent = this.caster.getPostEvent()\n       \n        for (let i = 0; i < casterPostEvent.length; i++) {\n            const event = {\n                ...casterPostEvent[i],\n                caster: this.caster,\n                target: this.ennemy,\n            }\n            await this.onNewEvent(event)\n        }\n\n        return new Promise(resolve => {\n            resolve()\n        })\n\n    }\n\n    async ennemyPostEvent(dead) {\n        if (dead === \"ennemy\") return\n        const ennemyPostEvent = this.ennemy.getPostEvent()\n        for (let i = 0; i < ennemyPostEvent.length; i++) {\n            const ennemyEvent = {\n                ...ennemyPostEvent[i],\n                caster: this.ennemy,\n                target: this.caster,\n            }\n            await this.onNewEvent(ennemyEvent)\n        }\n\n        return new Promise(resolve => {\n            resolve()\n        })\n    }\n    async init() {\n        await this.onNewEvent({\n            type: \"textMessage\",\n            text: \"Ca veut dahack\"\n        })\n\n        this.turn()\n    }\n\n    \n}"],"names":[],"version":3,"file":"index.a74512b4.js.map","sourceRoot":"/__parcel_source_root/"}